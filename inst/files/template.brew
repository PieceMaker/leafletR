<!DOCTYPE html>
<html>
<head>
	<title><%= title %></title>
	<meta charset="utf-8" />
	<meta name="viewport" content="width=device-width, initial-scale=1.0">
	<link rel="stylesheet" href="http://cdn.leafletjs.com/leaflet-0.7.2/leaflet.css" />
	<script src="http://cdn.leafletjs.com/leaflet-0.7.2/leaflet.js?2"></script>
<% if(any(!is.na(dat)) && !incl.data) { -%>
	<script src="http://code.jquery.com/jquery-1.10.2.min.js"></script>
<% for(n in 1:length(dat)) { -%>
	<link rel="dat<%= n %>" type="application/json" href="<%= tail(strsplit(dat[[n]], "/")[[1]], 1) %>" />
<% } -%>
<% } -%>
<%# extra style instructions start ######################################################### -%>
	<style type="text/css">
		body {
			padding: 0;
			margin: 0;
		}
<%# fullscreen -%>
<% if(any(is.na(size))) { -%>
		html, body, #map {
			height: 100%;
		}
<%# manual size -%>
<% } else { -%>
		#map {
			width: <%= size[1] %> px;
			height: <%= size[2] %> px;
		}
<% } -%>
<%# popup -%>
<% if(!any(is.na(popup))) { -%>
<% for(n in 1:length(popup)) if(length(popup[[n]])>1) { -%>		
		table, td {
			border-collapse: collapse;
			border-style: solid;
			border-width: 1px;
			border-color: #e9e9e9;
			padding: 5px;
		}
		.evenrowcol{
			background-color: #f6f6f6;
		}		
<% break -%>
<% } -%>
<% } -%>
<%# legend -%>
<% if(!any(is.na(style))) { -%>
<% if(is(style, "leafletr.style") || is.list(style)) { -%>
<% sty <- NULL -%>
<% if(is.list(style)) { -%>
<% for(i in 1:length(style)) sty <- append(sty, attr(style[[i]], "style.type")) -%>
<% if(all(sty=="single")) { -%>			
		.legend {
			padding: 6px 8px;
			font: 14px/16px Arial, Helvetica, sans-serif;
			background: white;
			background: rgba(255,255,255,0.8);
			box-shadow: 0 0 15px rgba(0,0,0,0.2);
			border-radius: 5px;
			line-height: 18px;
			color: #555;
		}
		.legend i {
			width: 18px;
			height: 18px;
			float: left;
			margin-right: 8px;
		}
		table, td {
			border: none;
		}
		.shape {
			padding: 0px;
			text-align: center;
			vertical-align: middle;
		}
		.value {
			padding: 0px 0px 0px 8px;
			text-align: left;
			vertical-align: middle;
		}
		.crcl {
			fill: #0033ff;
			fill-opacity: 0.5;
			stroke: #0033ff;
			stroke-width: 2;
			stroke-opacity: 0.5;
		}
		.ln {
			stroke: #0033ff;
			stroke-width: 5;
			stroke-opacity: 0.5;
			stroke-linecap: round;
		}
		.plgn {
			fill: #0033ff;
			fill-opacity: 0.5;
			stroke: #0033ff;
			stroke-width: 4;
			stroke-opacity: 0.5;
			stroke-linejoin: round;
		}
<% } -%>
<% } else if(attr(style, "style.type")=="graduated" || attr(style, "style.type")=="categorized") { -%>
<% if(attr(style, "style.par")=="col") { -%>
					
		.legend {
			padding: 6px 8px;
			font: 14px/16px Arial, Helvetica, sans-serif;
			background: white;
			background: rgba(255,255,255,0.8);
			box-shadow: 0 0 15px rgba(0,0,0,0.2);
			border-radius: 5px;
			line-height: 18px;
			color: #555;
		}
		.legend i {
			width: 18px;
			height: 18px;
			float: left;
			margin-right: 8px;
			<% opa <- style[[2]][grep("fillOpacity", style[[2]])] %>
			opacity: <%= as.numeric(gsub(".+\\s+", "", opa)) %>;
		}				
<% } else if(attr(style, "style.par")=="rad") { -%>
					
		.legend {
			padding: 6px 8px;
			font: 14px/16px Arial, Helvetica, sans-serif;
			background: white;
			background: rgba(255,255,255,0.8);
			box-shadow: 0 0 15px rgba(0,0,0,0.2);
			border-radius: 5px;
			line-height: 18px;
			color: #555;
		}
		.circle {
			border: none;
			padding: 0px;
			text-align: center;
			vertical-align: middle;
		}
		.value {
			border: none;
			padding: 0px 0px 0px 8px;
			text-align: left;
			vertical-align: middle;
		}
		.crcl {
			<% clr <- style[[2]][grep("fillColor", style[[2]])] %>
			fill: <%= substr(clr, nchar(clr)-7, nchar(clr)-1) %> ;
			<% opa <- style[[2]][grep("fillOpacity", style[[2]])] %>
			fill-opacity: <%= as.numeric(gsub(".+\\s+", "", opa)) %> ;
			<% brd <- style[[2]][grep("color", style[[2]])] %>
			stroke: <%= substr(brd, nchar(brd)-7, nchar(brd)-1) %> ;
			<% wght <- style[[2]][grep("weight", style[[2]])] %>
			stroke-width: <%= as.numeric(gsub(".+\\s+", "", wght)) %> ;
			<% opa <- style[[2]][grep("opacity", style[[2]])] %>
			stroke-opacity: <%= as.numeric(gsub(".+\\s+", "", opa)) %> ;
		}
		
<% } -%>
<% } -%>
<% } -%>
<% } -%>
	
	</style>
</head>
<body>
	<div id="map"></div>
	
<%# ## map script start ####################################################################### -%>
	<script type="text/javascript">	
<%# initialize the map -%>
<% if(is.na(center) || is.na(zoom)) { -%> 
		var map = L.map('map')
<% } else { -%> 
		var map = L.map('map').setView([<%= center[1] %> , <%= center[2] %> ], <%= zoom %> );
<% } -%>
<%# base layer ############################################################################ -%>
<% 
for(n in 1: length(base.map)) { 
bm <- basemaps[[ base.map[[n]] ]]
if (! is.null(bm)) { 	
-%>
		var baseMap<%= n %> = L.tileLayer('<%= bm$url %>', <%= jsonlite::toJSON(bm$options, auto_unbox=T) %>);
		baseMap<%= n %>.addTo(map);
<% }} -%>

<%# layer control ############################################################################ -%>
<% if(length(base.map)>1) { -%>
		var baseMaps = { 
<% for(n in 1:length(base.map)) { -%>
			"<%=  basemaps[[ base.map[[n]] ]]$name %>" : baseMap<%= n %>,
<% } -%>
		};
		L.control.layers(baseMaps).addTo(map);
<% } -%>

<%# data layer ############################################################################ -%>
<% if(any(!is.na(dat))) { -%>
	
<% } -%>
<%# popup #################################################################################-%>
		function onEachFeature(feature, layer) {
<% if(!any(is.na(popup))) { -%>
<% for(n in 1:length(popup)) { -%>
			if (feature.properties &&  <%= paste0("feature.properties.", popup[[n]], collapse=" && ") %>) {
<% if(length(popup[[n]])==1) { -%>
				layer.bindPopup("<%= popup[[n]] %>: " + feature.properties.<%= popup[[n]] %>);
<% } else { -%>
				layer.bindPopup(
					"<table>" +
<% for(i in 1:length(popup[[n]])) { -%>
					"<tr class='<%= ifelse(i%%2==0, 'even', 'odd') %>rowcol'><td><%= popup[[n]][i] %>: </td><td>"+feature.properties.<%= popup[[n]][i] %>+"</td></tr>" +
<% } -%>
					"</table>"
				);
<% } -%>
			}
<% } -%>
<% } -%>
		};


<%# styling -%>
<% if(any(!is.na(style))) { -%>
<% if(any(class(style)=="list")) { -%>
<% for(n in 1:length(style)) { -%>
<% if(any(!is.na(style[[n]]))) { -%>	
		var style<%= n %> = {<%= paste(style[[n]], collapse = ",") %>};
<% } -%>
<% } -%>
<% } else { -%>
<% if(attr(style, "style.type")=="single") { -%>
		var style1= {<%= paste(style, collapse =", ") %>};
<% } -%>
<% if(attr(style, "style.type")=="graduated") { -%>
		function getValue(x) {
<% for(n in 1:length(style[[1]])) { -%> 
<%= style[[1]][n] %>
<% } -%>
		}			
		function style(feature) {
			return {
<% if(is.null(style[[2]])) { -%>
<% if(attr(style, "style.par")=="col") { -%> 
				"color": getValue(feature.properties.<%= attr(style, "property") %>),
<% } else if(attr(style, "style.par")=="rad") {-%> 
				"radius": getValue(feature.properties.<%= attr(style, "property") %>),
<% } %>
<% } else { -%>
<% if(attr(style, "style.par")=="col") { -%> 
				"color": getValue(feature.properties.<%= attr(style, "property") %>),
<% } else if(attr(style, "style.par")=="rad") { -%>
				"radius": getValue(feature.properties.<%= attr(style, "property") %>),
<% } %>
				<%= paste(style[[2]], collapse=", ") %>
<% } -%>
			};
		}
<% } -%>
<% if(attr(style, "style.type")=="categorized") { -%>
		function getValue(x) {
<% for(n in 1:length(style[[1]])) { -%> 
			<%= style[[1]][n] %>
<% } -%>
		}
					
		function style(feature) {
			return {
<% if(is.null(style[[2]])) { -%>
<% if(attr(style, "style.par")=="col") { -%> 
				"color": getValue(feature.properties.<%= attr(style, "property") %>),
<% } else if(attr(style, "style.par")=="rad") {-%> 
				"radius": getValue(feature.properties.<%= attr(style, "property") %>),
<% } -%>
<% } else { -%>
<% if(attr(style, "style.par")=="col") { -%> 
				"color": getValue(feature.properties.<%= attr(style, "property") %>),
<% } else if(attr(style, "style.par")=="rad") { -%>
				"radius": getValue(feature.properties.<%= attr(style, "property") %>),
<% } -%>
				<%= paste(style[[2]], collapse=", ") %>
<% } -%>
			};
		}
<% } -%>
<% } -%>
<% } -%>
	
<%# data layer #################################################################################### %>
	<% fit.bounds <- TRUE -%>
	<% for(n in 1:length(dat)) { -%>
		<% if(incl.data) {	
		
			if(!file.exists(dat[[n]])) stop("data file not found")
			con <- file(dat[[n]], "rt") 
			lns <- readLines(con) 
			close(con) -%>		
		var data<%= n %> = <%= paste(lns, collapse="\n") %>
		
		<%} else {-%>
		$.getJSON($("link[rel='dat<%= n %>']").attr("href"), function(data<%= n %>) {
		<% } -%>
		var dat<%= n%> = L.geoJson(data<%= n %>, {
			onEachFeature: onEachFeature,
			pointToLayer: function (feature, latlng) {
			<% if(any(is.na(style))) { %>
				return L.circleMarker(latlng);
			<% } else { -%>
				var sty = (typeof style<%= n%> == "undefined")? (typeof style == "undefined"?undefined:style) : style<%= n%>;
				return L.circleMarker(latlng, sty);
			<% } -%>
			},
			style: (typeof style<%= n%> == "undefined")? (typeof style == "undefined"?undefined:style) : style<%= n%>,
			
		});
			<% if(is.na(center) || is.na(zoom)) { -%>
				<% if(fit.bounds) { -%>
		map.fitBounds(dat<%= n %>.getBounds());
				<% fit.bounds <- FALSE -%>
			<% }} -%>
		dat<%= n %>.addTo(map);
		<% if(!incl.data) { %> }); <% } %>
	<% } -%>

<%#	add legend ######################################################################################## -%>
	<% if(!any(is.na(style))) {
		if(is.list(style) & !is(style, "leafletr.style")) { # multi single style
			sty <- NULL
			for(i in 1:length(style)) sty <- append(sty, attr(style[[i]], "style.type"))
			if(all(sty=="single")) { -%>
		// single style
		var legend = L.control({position: 'bottomright'});
		legend.onAdd = function(map) {
		var div = L.DomUtil.create('div', 'legend');
			<% if(!is.null(attr(style, "leg"))) { %>div.innerHTML += '<%= attr(style, "leg") %><br>' <% } %>
			
			<%# rearrange layers for legend (point > line > polygon) %>
			<%	n.dat <- 0
				dat.ra <- style.ra <- list()
				for(i in 1:length(dat)) {
					if(getFeatureType(dat[[i]])=="point") {
						dat.ra[[n.dat+1]] <- dat[[i]]
						style.ra[[n.dat+1]] <- style[[i]]
						if(!is.null(names(dat)[i])) names(dat.ra)[n.dat+1] <- names(dat)[i]
						n.dat <- n.dat+1
					}
				}
				if(n.dat<length(dat)) {
					for(i in 1:length(dat)) {
						if(getFeatureType(dat[[i]])=="line") {
							dat.ra[[n.dat+1]] <- dat[[i]]
							style.ra[[n.dat+1]] <- style[[i]]
							if(!is.null(names(dat)[i])) names(dat.ra)[n.dat+1] <- names(dat)[i]
							n.dat <- n.dat+1
						}
					}
				}
				if(n.dat<length(dat)) {
					for(i in 1:length(dat)) {
						if(getFeatureType(dat[[i]])=="polygon") {
							dat.ra[[n.dat+1]] <- dat[[i]]
							style.ra[[n.dat+1]] <- style[[i]]
							if(!is.null(names(dat)[i])) names(dat.ra)[n.dat+1] <- names(dat)[i]
							n.dat <- n.dat+1
						}
					}
				}
				
				# get max column width/height
				max.width <- 24
				max.lwd <- 2
				for(i in 1:length(style.ra)) {
					rad <- style.ra[[i]][grep("rad", style.ra[[i]])]
					if(length(rad)==0) rad <- "radius: 10"
					lwd <- style.ra[[i]][grep("weight", style.ra[[i]])]
					if(length(lwd)==0) lwd <- "weight: 2"
					rad <- substr(rad, 9, nchar(rad))
					lwd <- substr(lwd, 9, nchar(lwd))
					width <- as.numeric(rad)*2+as.numeric(lwd)
					if(getFeatureType(dat.ra[[i]])=="polygon") width <- as.numeric(lwd)*2
					if(width>max.width) max.width <- width
					
					lwd <- style.ra[[i]][grep("weight", style.ra[[i]])]
					if(length(lwd)==0) lwd <- "weight: 5"
					lwd <- substr(lwd, 9, nchar(lwd))
					l <- as.numeric(lwd)
					if(l>max.lwd) max.lwd <- l
				}
				# write legend
				for(i in 1:length(style.ra)) { %>
			div.innerHTML +=
					<% fill <- style.ra[[i]][grep("fillColor", style.ra[[i]])]
					clr <- style.ra[[i]][grep("color", style.ra[[i]])]
					if(length(fill)==0) fill <- clr
					if(length(fill)==0) fill <- "color: "#0033ff""
					if(length(clr)==0) clr <- "color: "#0033ff""
					rad <- style.ra[[i]][grep("rad", style.ra[[i]])]
					if(length(rad)==0) rad <- "radius: 10"
					fill.opa <- style.ra[[i]][grep("fillOpacity", style.ra[[i]])]
					if(length(fill.opa)==0) fill.opa <- "fillOpacity: 0.2"
					opa <- style.ra[[i]][grep("opacity", style.ra[[i]])]
					if(length(opa)==0) opa <- "opacity: 0.5"
					lwd <- style.ra[[i]][grep("weight", style.ra[[i]])]
					
					ft <- getFeatureType(dat.ra[[i]])
					ttl <- names(dat.ra)[i]
					if(!is.null(ttl)) {
						ttl <- gsub(".", " ", ttl, fixed=TRUE)
						ttl <- gsub("_", " ", ttl, fixed=TRUE)
					}
					if(is.null(ttl)) ttl <- i
					else if(ttl=="") ttl <- i
										
					if(ft=="point") {
						rd <- substr(rad, 9, nchar(rad))
						if(length(lwd)==0) lwd <- "weight: 2"
						lwd <- substr(lwd, 9, nchar(lwd))
						st <- paste0("fill: ", substr(fill, nchar(fill)-7, nchar(fill)-1), "; stroke: ", substr(clr, nchar(clr)-7, nchar(clr)-1), "; fill-opacity: ", substr(fill.opa, 14, nchar(fill.opa)), "; stroke-opacity: ", substr(opa, 10, nchar(opa)), "; stroke-width: ", lwd, ";")
						-%>
					'<table><tr><td class="shape"><svg style="width: <%= max.width %>px; height: <%= as.numeric(rd)*2+as.numeric(lwd) %>px; xmlns="http://www.w3.org/2000/svg" version="1.1"><circle class="crcl" style="<%= st %>" cx="<%= max.width/2 %>" cy="<%= (as.numeric(rd)*2+as.numeric(lwd))/2 %>" r="<%= rd %>" /></svg></td><td class="value"><%= ttl %></td></tr></table>'
					
						<% } else if(ft=="line") {
						if(length(lwd)==0) lwd <- "weight: 5"
						lwd <- substr(lwd, 9, nchar(lwd))
						st <- paste0("stroke: ", substr(clr, nchar(clr)-7, nchar(clr)-1), "; stroke-opacity: ", substr(opa, 10, nchar(opa)), "; stroke-width: ", lwd, ";")
						if(as.numeric(lwd)<18) hght <- 18
						else hght <- as.numeric(lwd) %>
						
					'<table><tr><td class="shape"><svg style="width:<%= max.width %>px; height:<%= hght %>px;" xmlns="http://www.w3.org/2000/svg" version="1.1"><line class="ln" style="<%= st %>" x1="<%= max.lwd+1-(max.lwd-as.numeric(lwd)/2) %>" y1="<%= hght/2 %>" x2="<%= max.width-max.lwd-1+(max.lwd-as.numeric(lwd)/2) %>" y2="<%= hght/2 %>" /></svg></td><td class="value"><%= ttl %></td></tr></table>'
					
					<% } else if(ft=="polygon") {
						if(length(lwd)==0) lwd <- "weight: 5"
						lwd <- substr(lwd, 9, nchar(lwd))
						st <- paste0("fill: ", substr(fill, nchar(fill)-7, nchar(fill)-1), "; stroke: ", substr(clr, nchar(clr)-7, nchar(clr)-1), "; fill-opacity: ", substr(fill.opa, 14, nchar(fill.opa)), "; stroke-opacity: ", substr(opa, 10, nchar(opa)), "; stroke-width: ", lwd, ";")
						if(as.numeric(lwd)<11) hght <- 22
						else hght <- as.numeric(lwd)*2 -%>
					'<table><tr><td class="shape"><svg style="width:<%= max.width %>px; height:<%= hght %>px;" xmlns="http://www.w3.org/2000/svg" version="1.1"><polygon class="plgn" style="<%= st %>" points="<%= max.lwd+1-(max.lwd-as.numeric(lwd)/2) %>, <%= as.numeric(lwd)/2 %> <%= max.width-max.lwd-1+(max.lwd-as.numeric(lwd)/2) %>, <%= hght/2 %> <%= max.width-max.lwd-1+(max.lwd-as.numeric(lwd)/2) %>, <%= hght-as.numeric(lwd)/2 %> <%= max.lwd+1-(max.lwd-as.numeric(lwd)/2) %>, <%= hght-as.numeric(lwd)/2 %>" /></svg></td><td class="value"><%= ttl %></td></tr></table>'
					<% }
				} -%>
			return div;
		};
		legend.addTo(map);
		<% } %>
	<% } else if(is(style, "leafletr.style")) { # non simpleStyle
			if(attr(style, "style.type")=="graduated") { # graduated style -%>
				// Graduated legend
				var legend = L.control({position: 'bottomright'});
				legend.onAdd = function(map) {
					var div = L.DomUtil.create('div', 'legend');
				    var labels = [];
				    var grades = [<%= paste(attr(style, "breaks"), collapse=", ") %>];
				    <% if(!is.null(attr(style, "leg"))) { %>div.innerHTML += '<%= attr(style, "leg") %><br>'<% } %>
					
						<% if(attr(style, "style.par")=="col") { # color scale %>
					
					
					
<% if(attr(style, "out")==0) { # left and right closed -%>
					for (var i = 0; i < grades.length-1; i++) { 
						div.innerHTML +=
						        <% if(attr(style, "right")) {%>'<i style="background:' + getValue(grades[i]) + '"></i> ' +
						        <% } else { %>'<i style="background:' + getValue(grades[i]+(grades[1]-grades[0])*0.01) + '"></i> ' + <% } -%>
								grades[i] + '&ndash;' + grades[i + 1] + '<br>';
					}
					
<% } else if(attr(style, "out")==1) { # left closed and right open -%>
					for (var i = 0; i < grades.length; i++) {
						div.innerHTML +=
						        <% if(attr(style, "right")) { -%>
							'<i style="background:' + getValue(grades[i]) + '"></i> ' +
						    (grades[i + 1] ? grades[i] + '&ndash;' + grades[i + 1] + '<br>' : '&ge;' + grades[i]);
						        <% } else { -%>
						    '<i style="background:' + getValue(grades[i]+(grades[1]-grades[0])*0.01) + '"></i> ' +
						    (grades[i + 1] ? grades[i] + '&ndash;' + grades[i + 1] + '<br>' : '&gt;' + grades[i]);
						       <% } -%>
					}
<% } else if(attr(style, "out")==2) { # left open and right closed -%>
					div.innerHTML +=
						<% if(attr(style, "right")) { %>'<i style="background:' + getValue(grades[0]-(grades[1]-grades[0])*0.01) + '"></i> &lt;' + grades[0] + '<br>';
						<% } else { %>'<i style="background:' + getValue(grades[0]-(grades[1]-grades[0])*0.01) + '"></i> &le;' + grades[0] + '<br>'; <% } %>
					for (var i = 0; i < grades.length-1; i++) {
						div.innerHTML +=
							<% if(attr(style, "right")) { %>'<i style="background:' + getValue(grades[i]) + '"></i> ' +
							<% }else { %>'<i style="background:' + getValue(grades[i]+(grades[1]-grades[0])*0.01) + '"></i> ' + <% } %>
							(i<grades.length-1 ? grades[i] + '&ndash;' + grades[i+1] + '<br>' : grades[i] + '&ndash;' + grades[i+1]);
					}
<% } else { # left and right open -%>
					div.innerHTML +=
						<% if(attr(style, "right")) { %>'<i style="background:' + getValue(grades[0]-(grades[1]-grades[0])*0.01) + '"></i> &lt;' + grades[0] + '<br>';
						<% } else { %>'<i style="background:' + getValue(grades[0]-(grades[1]-grades[0])*0.01) + '"></i> &le;' + grades[0] + '<br>'; <% } %>
					for (var i = 0; i < grades.length; i++) {
						div.innerHTML +=
						        <% if(attr(style, "right")) { -%>
						    '<i style="background:' + getValue(grades[i]) + '"></i> ' +
						    (i<grades.length-1 ? grades[i] + '&ndash;' + grades[i+1] + '<br>' : '&ge;' + grades[i]);
								 <% } else { -%>
						    '<i style="background:' + getValue(grades[i]+(grades[1]-grades[0])*0.01) + '"></i> ' +
							(i<grades.length-1 ? grades[i] + '&ndash;' + grades[i+1] + '<br>' : '&gt;' + grades[i]);
						        <% } -%>
					}	
			//return div;
			//};
<% } # end out -%>
					
					
					
					
					
	<% } else if(attr(style, "style.par")=="rad") { # radius scale -%>
					<% 
					wght <- style[[2]][grep("weight", style[[2]])]
					wght <- as.numeric(gsub(".+\\s+", "", wght))*2-1 
					if(attr(style, "out")==0) { # left and right closed 
						-%> 
			for (var i = 0; i < grades.length-1; i++) {
				div.innerHTML +=
					'<table style="border: none;"><tr><td class="circle" style="width: ' + (getValue(grades[grades.length-2])*2+<%= wght %>) + 'px;"><svg style="width: ' + (getValue(grades[i])*2+<%= wght %>) + 'px; height: ' + (getValue(grades[i])*2+<%= wght %>) + 'px;" xmlns="http://www.w3.org/2000/svg" version="1.1"><circle class="crcl" cx="' + (getValue(grades[i])+<%= wght %>) + '" cy="' + (getValue(grades[i])+<%= wght %>) + '" r="' + getValue(grades[i]) + '" /></svg></td><td class="value">' + grades[i] + '&ndash;' + grades[i+1] + '</td></tr></table>'
			}
					<% } else if(attr(style, "out")==1) { # left closed and right open -%>
					    <% if(attr(style, "right")) { -%>
			for (var i = 0; i < grades.length-1; i++) {
				div.innerHTML +=
					'<table style="border: none;"><tr><td class="circle" style="width: ' + (getValue(grades[grades.length-1])*2+<%= wght %>) + 'px;"><svg style="width: ' + (getValue(grades[i])*2+<%= wght %>) + 'px; height: ' + (getValue(grades[i])*2+<%= wght %>) + 'px;" xmlns="http://www.w3.org/2000/svg" version="1.1"><circle class="crcl" cx="' + (getValue(grades[i])+<%= wght %>) + '" cy="' + (getValue(grades[i])+<%= wght %>) + '" r="' + getValue(grades[i]) + '" /></svg></td><td class="value">' + grades[i] + '&ndash;' + grades[i+1] + '</td></tr></table>'
			}
			div.innerHTML +=
				'<table style="border: none;"><tr><td class="circle" style="width: ' + (getValue(grades[grades.length-1])*2+<%= wght %>) + 'px;"><svg style="width: ' + (getValue(grades[grades.length-1])*2+<%= wght %>) + 'px; height: ' + (getValue(grades[grades.length-1])*2+<%= wght %>) + 'px;" xmlns="http://www.w3.org/2000/svg" version="1.1"><circle class="crcl" cx="' + (getValue(grades[grades.length-1])+<%= wght %>) + '" cy="' + (getValue(grades[grades.length-1])+<%= wght %>) + '" r="' + getValue(grades[grades.length-1]) + '" /></svg></td><td class="value">' + '&ge;' + grades[grades.length-1] + '</td></tr></table>'
						<% } else { -%>
			for (var i = 1; i < grades.length; i++) {
				div.innerHTML +=
					'<table style="border: none;"><tr><td class="circle" style="width: ' + (getValue(grades[grades.length-1]+1)*2+<%= wght %>) + 'px;"><svg style="width: ' + (getValue(grades[i])*2+<%= wght %>) + 'px; height: ' + (getValue(grades[i])*2+<%= wght %>) + 'px;" xmlns="http://www.w3.org/2000/svg" version="1.1"><circle class="crcl" cx="' + (getValue(grades[i])+<%= wght %>) + '" cy="' + (getValue(grades[i])+<%= wght %>) + '" r="' + getValue(grades[i]) + '" /></svg></td><td class="value">' + grades[i-1] + '&ndash;' + grades[i] + '</td></tr></table>'
			}
			div.innerHTML +=
				'<table style="border: none;"><tr><td class="circle" style="width: ' + (getValue(grades[grades.length-1]+1)*2+<%= wght %>) + 'px;"><svg style="width: ' + (getValue(grades[grades.length-1]+1)*2+<%= wght %>) + 'px; height: ' + (getValue(grades[grades.length-1]+1)*2+<%= wght %>) + 'px;" xmlns="http://www.w3.org/2000/svg" version="1.1"><circle class="crcl" cx="' + (getValue(grades[grades.length-1]+1)+<%= wght %>) + '" cy="' + (getValue(grades[grades.length-1]+1)+<%= wght %>) + '" r="' + getValue(grades[grades.length-1]+1) + '" /></svg></td><td class="value">' + '&gt;' + grades[grades.length-1] + '</td></tr></table>'
						<% } -%>
					<%} else if(attr(style, "out")==2) { # left open and right closed -%>
						<% if(attr(style, "right")) { -%>
			div.innerHTML +=
				'<table style="border: none;"><tr><td class="circle" style="width: ' + (getValue(grades[grades.length-2])*2+<%= wght %>) + 'px;"><svg style="width: ' + (getValue(grades[0]-1)*2+<%= wght %>) + 'px; height: ' + (getValue(grades[0]-1)*2+<%= wght %>) + 'px;" xmlns="http://www.w3.org/2000/svg" version="1.1"><circle class="crcl" cx="' + (getValue(grades[0]-1)+<%= wght %>) + '" cy="' + (getValue(grades[0]-1)+<%= wght %>) + '" r="' + getValue(grades[0]-1) + '" /></svg></td><td class="value">' + '&lt;' + grades[0] + '</td></tr></table>'
			for (var i = 1; i < grades.length; i++) {
				div.innerHTML +=
					 '<table style="border: none;"><tr><td class="circle" style="width: ' + (getValue(grades[grades.length-2])*2+<%= wght %>) + 'px;"><svg style="width: ' + (getValue(grades[i-1])*2+<%= wght %>) + 'px; height: ' + (getValue(grades[i-1])*2+<%= wght %>) + 'px;" xmlns="http://www.w3.org/2000/svg" version="1.1"><circle class="crcl" cx="' + (getValue(grades[i-1])+<%= wght %>) + '" cy="' + (getValue(grades[i-1])+<%= wght %>) + '" r="' + getValue(grades[i-1]) + '" /></svg></td><td class="value">' + grades[i-1] + '&ndash;' + grades[i] + '</td></tr></table>'
			}
						<% } else { -%>
				div.innerHTML +=
					'<table style="border: none;"><tr><td class="circle" style="width: ' + (getValue(grades[grades.length-1])*2+<%= wght %>) + 'px;"><svg style="width: ' + (getValue(grades[0])*2+<%= wght %>) + 'px; height: ' + (getValue(grades[0])*2+<%= wght %>) + 'px;" xmlns="http://www.w3.org/2000/svg" version="1.1"><circle class="crcl" cx="' + (getValue(grades[0])+<%= wght %>) + '" cy="' + (getValue(grades[0])+<%= wght %>) + '" r="' + getValue(grades[0]) + '" /></svg></td><td class="value">' + '&le;' + grades[0] + '</td></tr></table>'
				for (var i = 1; i < grades.length; i++) {
					div.innerHTML +=
					 	'<table style="border: none;"><tr><td class="circle" style="width: ' + (getValue(grades[grades.length-1])*2+<%= wght %>) + 'px;"><svg style="width: ' + (getValue(grades[i])*2+<%= wght %>) + 'px; height: ' + (getValue(grades[i])*2+<%= wght %>) + 'px;" xmlns="http://www.w3.org/2000/svg" version="1.1"><circle class="crcl" cx="' + (getValue(grades[i])+<%= wght %>) + '" cy="' + (getValue(grades[i])+<%= wght %>) + '" r="' + getValue(grades[i]) + '" /></svg></td><td class="value">' + grades[i-1] + '&ndash;' + grades[i] + '</td></tr></table>'
				}
						<% } -%>
					<% } else { # left and right open -%>
						<% if(attr(style, "right")) { -%>
			div.innerHTML +=
				'<table style="border: none;"><tr><td class="circle" style="width: ' + (getValue(grades[grades.length-1])*2+<%= wght %>) + 'px;"><svg style="width: ' + (getValue(grades[0]-1)*2+<%= wght %>) + 'px; height: ' + (getValue(grades[0]-1)*2+<%= wght %>) + 'px;" xmlns="http://www.w3.org/2000/svg" version="1.1"><circle class="crcl" cx="' + (getValue(grades[0]-1)+<%= wght %>) + '" cy="' + (getValue(grades[0]-1)+<%= wght %>) + '" r="' + getValue(grades[0]-1) + '" /></svg></td><td class="value">' + '&lt;' + grades[0] + '</td></tr></table>'
			for (var i = 1; i < grades.length; i++) {
				div.innerHTML +=
					'<table style="border: none;"><tr><td class="circle" style="width: ' + (getValue(grades[grades.length-1])*2+<%= wght %>) + 'px;"><svg style="width: ' + (getValue(grades[i-1])*2+<%= wght %>) + 'px; height: ' + (getValue(grades[i-1])*2+<%= wght %>) + 'px;" xmlns="http://www.w3.org/2000/svg" version="1.1"><circle class="crcl" cx="' + (getValue(grades[i-1])+<%= wght %>) + '" cy="' + (getValue(grades[i-1])+<%= wght %>) + '" r="' + getValue(grades[i-1]) + '" /></svg></td><td class="value">' + grades[i-1] + '&ndash;' + grades[i] + '</td></tr></table>'
			}
			div.innerHTML +=
				'<table style="border: none;"><tr><td class="circle" style="width: ' + (getValue(grades[grades.length-1])*2+<%= wght %>) + 'px;"><svg style="width: ' + (getValue(grades[grades.length-1])*2+<%= wght %>) + 'px; height: ' + (getValue(grades[grades.length-1])*2+<%= wght %>) + 'px;" xmlns="http://www.w3.org/2000/svg" version="1.1"><circle class="crcl" cx="' + (getValue(grades[grades.length-1])+<%= wght %>) + '" cy="' + (getValue(grades[grades.length-1])+<%= wght %>) + '" r="' + getValue(grades[grades.length-1]) + '" /></svg></td><td class="value">' + '&ge;' + grades[grades.length-1] + '</td></tr></table>'
						<% } else { -%>
			div.innerHTML +=
				'<table style="border: none;"><tr><td class="circle" style="width: ' + (getValue(grades[grades.length-1])*2+<%= wght %>) + 'px;"><svg style="width: ' + (getValue(grades[0])*2+<%= wght %>) + 'px; height: ' + (getValue(grades[0])*2+<%= wght %>) + 'px;" xmlns="http://www.w3.org/2000/svg" version="1.1"><circle class="crcl" cx="' + (getValue(grades[0])+<%= wght %>) + '" cy="' + (getValue(grades[0])+<%= wght %>) + '" r="' + getValue(grades[0]) + '" /></svg></td><td class="value">' + '&le;' + grades[0] + '</td></tr></table>'
			for (var i = 1; i < grades.length; i++) {
				div.innerHTML +=
					'<table style="border: none;"><tr><td class="circle" style="width: ' + (getValue(grades[grades.length-1])*2+<%= wght %>) + 'px;"><svg style="width: ' + (getValue(grades[i])*2+<%= wght %>) + 'px; height: ' + (getValue(grades[i])*2+<%= wght %>) + 'px;" xmlns="http://www.w3.org/2000/svg" version="1.1"><circle class="crcl" cx="' + (getValue(grades[i])+<%= wght %>) + '" cy="' + (getValue(grades[i])+<%= wght %>) + '" r="' + getValue(grades[i]) + '" /></svg></td><td class="value">' + grades[i-1] + '&ndash;' + grades[i] + '</td></tr></table>'
			}
			div.innerHTML +=
				'<table style="border: none;"><tr><td class="circle" style="width: ' + (getValue(grades[grades.length-1]+1)*2+<%= wght %>) + 'px;"><svg style="width: ' + (getValue(grades[grades.length-1]+1)*2+<%= wght %>) + 'px; height: ' + (getValue(grades[grades.length-1]+1)*2+<%= wght %>) + 'px;" xmlns="http://www.w3.org/2000/svg" version="1.1"><circle class="crcl" cx="' + (getValue(grades[grades.length-1]+1)+<%= wght %>) + '" cy="' + (getValue(grades[grades.length-1]+1)+<%= wght %>) + '" r="' + getValue(grades[grades.length-1]+1) + '" /></svg></td><td class="value">' + '&gt;' + grades[grades.length-1] + '</td></tr></table>'
						<% }
					}
				} -%>
				
			return div;
		};
		legend.addTo(map);
				
<% } else if(attr(style, "style.type")=="categorized") { # categorized style 
	wght <- style[[2]][grep("weight", style[[2]])]
	wght <- as.numeric(gsub(".+\\s+", "", wght))*2-1 
	%>
		var legend = L.control({position: 'bottomright'});
		legend.onAdd = function(map) {
			var div = L.DomUtil.create('div', 'legend');
		    var labels = [];
		    var cats = [<%= paste( paste0("'", attr(style, "values"), "'"), collapse=",") %>];
		    <% if(!is.null(attr(style, "leg"))) %>div.innerHTML += '<%= attr(style, "leg") %><br>';
				<% if(attr(style, "style.par")=="col") { # color scale -%>
			for (var i = 0; i < cats.length; i++) {
				div.innerHTML +=
				    '<i style="background:' + getValue(cats[i]) + '"></i> ' +
					cats[i] + '<br>';
			}
					<% if(!is.null(attr(style, "na", T))) { -%>
			div.innerHTML += '<i style="background:' + getValue() + '"></i> <%= attr(style, "na") %>'
					<% } -%>
					<% } else if(attr(style, "style.par")=="rad") { # radius scale 
					-%>
			for (var i = 0; i < cats.length; i++) {
				div.innerHTML +=
				    '<table style="border: none;"><tr><td class="circle" style="width: ' + (getValue(cats[cats.length-1])*2+<%= wght %>) + 'px;"><svg style="width: ' + (getValue(cats[i])*2+<%= wght %>) + 'px; height: ' + (getValue(cats[i])*2+<%= wght %>) + 'px;" xmlns="http://www.w3.org/2000/svg" version="1.1"><circle class="crcl" cx="' + (getValue(cats[i])+<%= wght %>) + '" cy="' + (getValue(cats[i])+<%= wght %>) + '" r="' + getValue(cats[i]) + '" /></svg></td><td class="value">' + cats[i] + '</td></tr></table>'
			}
					<% if(!is.null(attr(style, "na", T))) { -%>
			div.innerHTML +=
				'<table style="border: none;"><tr><td class="circle" style="width: ' + (getValue(cats[cats.length-1])*2+<%= wght %>) + 'px;"><svg style="width: ' + (getValue()*2+<%= wght %>) + 'px; height: ' + (getValue()*2+<%= wght %>) + 'px;" xmlns="http://www.w3.org/2000/svg" version="1.1"><circle class="crcl" cx="' + (getValue()+<%= wght %>) + '" cy="' + (getValue()+<%= wght %>) + '" r="' + getValue() + '" /></svg></td><td class="value">' + '", attr(style, "na"), "' + '</td></tr></table>'
					<% } -%>
					<% } -%>
			return div;
		};
		legend.addTo(map);
			<% } -%>
	<% } # end non simpleStyle -%>	

<% } # end any data ? -%>	
	</script>
</body>
</html>


